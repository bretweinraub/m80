#! /bin/bash
#
# M80 ---- see the License file for restrictions
#



PROGNAME=${0##*/}
TMPFILE=/tmp/${PROGNAME}.$$

if [ -n "${DEBUG}" ]; then	
	set -x
fi

PSCMD="ps axc"  








#
# $Header: /cvsroot/m80/m80/lib/shell/printmsg.sh,v 1.1.1.1 2003/11/26 22:24:33 bretweinraub Exp $
#
# Function:	printmsg
#
# Description:	generic error reporting routine.
#               BEWARE, white space is stripped and replaced with single spaces
#
# Call Signature:
#
# Side Effects:
#
# Assumptions:
#

printmsg () {
    if [ -z "${QUIET}" ]; then 
	if [ $# -ge 1 ]; then
	    /bin/echo -n ${M80_OVERRIDE_DOLLAR0:-$PROGNAME}:\($$\) >&2
		while [ $# -gt 0 ]; do /bin/echo -n " "$1 >&2 ; shift ; done
		if [ -z "${M80_SUPRESS_PERIOD}" ]; then
		    echo . >&2
		else
		    echo >&2
		fi
	fi
    fi
}


#
# Function:	cleanup
#
# Description:	generic KSH funtion for the end of a script
#
# History:	02.22.2000	bdw	passed error code through to localclean
#
# $Id: cleanup.sh,v 1.2 2004/04/06 22:42:02 bretweinraub Exp $
#

cleanup () {
    export EXITCODE=$1
    shift
    if [ $# -gt 0 ]; then
	printmsg $*
    fi
    if [ -n "${DQITMPFILE}" ]; then
	rm -f ${DQITMPFILE}
    fi
    if [ -n "${LOCALCLEAN}" ]; then
	localclean ${EXITCODE} # this function must be set
    fi
    if [ ${EXITCODE} -ne 0 ]; then
	# this is an error condition
	printmsg exiting with error code ${EXITCODE}
    else
	printmsg done
    fi
    exit ${EXITCODE}
}

trap "cleanup 1 caught signal" INT QUIT TERM HUP 2>&1 > /dev/null


require () {
    while [ $# -gt 0 ]; do
	#printmsg validating \$${1}
	derived=$(eval "echo \$"$1)
	if [ -z "$derived" ];then
	    printmsg \$${1} not defined
	    usage
	fi
	shift
    done
}



#
# Function:	docmd
#
# Description:	a generic wrapper for ksh functions
#
# $Id: docmd.sh,v 1.1.1.1 2003/11/26 22:24:33 bretweinraub Exp $

docmd () {
    if [ $# -lt 1 ]; then
	return
    fi
    #print ; eval "echo \* $*" ; print
    eval "echo '$*'"
    eval $*
    RETURNCODE=$?
    if [ $RETURNCODE -ne 0 ]; then
	cleanup $RETURNCODE command \"$*\" returned with error code $RETURNCODE
    fi
    return 0
}


#
# Function:	docmdi
#
# Description:	execute a command, but ignore the error code
#
# $Id: docmdi.sh,v 1.1.1.1 2003/11/26 22:24:33 bretweinraub Exp $

docmdi () {
    if [ $# -lt 1 ]; then
	return
    fi
#    print ; eval "echo \* $*" ; print
    eval "echo '$*'"
    eval $*
    export RETURNCODE=$?
    if [ $RETURNCODE -ne 0 ]; then
	printmsg command \"$*\" returned with error code $RETURNCODE, ignored
    fi
    return $RETURNCODE
}


#
# Function:	docmdqi
#
# Description:	execute a command quietly, but ignore the error code
#
# $Id: docmdqi.sh,v 1.1.1.1 2003/11/26 22:24:33 bretweinraub Exp $
#

docmdqi () {
    if [ $# -lt 1 ]; then return; fi
    DQITMPFILE=/tmp/${PROGNAME}.$$.dcmdqi
    eval $* 2>&1 > ${DQITMPFILE}
    export RETURNCODE=$?
    if [ ${RETURNCODE} -ne 0 ]; then
	cat ${DQITMPFILE} >&2
    fi
    rm -f ${DQITMPFILE}
    return $RETURNCODE
}


#
# Function:	checkfile
#
# Description:	This function is used to check whether some file ($2) or
#               directory meets some condition ($1).  If not print out an error
#               message ($3+).
#
# $Id: checkfile.sh,v 1.1.1.1 2003/11/26 22:24:33 bretweinraub Exp $

checkfile () {
    if [ $# -lt 2 ]; then
	cleanup 1 illegal arguments to the checkfile \(\) function
    fi
    FILE=$2
    if [ ! $1 $FILE ]; then
	shift; shift
	cleanup 1 file $FILE $*
    fi
}

checkNotFile () {
    if [ $# -lt 2 ]; then
	cleanup 1 illegal arguments to the checkNotfile \(\) function
    fi
    FILE=$2
    if [ $1 $FILE ]; then
	shift; shift
	cleanup 1 file $FILE $*
    fi
}




LOCALCLEAN=true
localclean () {
    rm -f /tmp/${PROGNAME}.$$*
    
}



usage () {
  printmsg  I am unhappy ...... a usage message follows for your benefit
  printmsg  Usage is -t {TARGET} -l {LOADM80_BDF=TRUE} -b {M80_BDF} -T {TOP} 

printmsg  Required variables: TARGET M80_BDF TOP 


  cleanup 1
} 

OPTIND=0
while getopts :t:lb:T: c 
    do case $c in        
	t) export TARGET=$OPTARG;;
	l) export LOADM80_BDF=TRUE;;
	b) export M80_BDF=$OPTARG;;
	T) export TOP=$OPTARG;;
	:) printmsg $OPTARG requires a value
	   usage;;
	\?) printmsg unknown option $OPTARG
	   usage;;
    esac
done












test -z "${TARGET}" && {
	printmsg missing value for TARGET
	usage
}
test -z "${M80_BDF}" && {
	printmsg missing value for M80_BDF
	usage
}
test -z "${TOP}" && {
	printmsg missing value for TOP
	usage
}





requireSet () { 
    if [ $# -ne 1 ]; then  
	return 
    fi 
    derived=$(eval "echo \$"$1) ; 
    if [ -z "$derived" ]; then 
         echo variable \$${1} was not found in the build environment
         eval `varWarrior ${1}` 
         eval export ${1}=$(eval "echo \$"$1) 
    fi 
}  

test -n "${DEBUG}" && {
    set -x
}

if [ "${LOADM80_BDF}" = "TRUE" ]; then
    require M80_REPOSITORY
    require M80_BDF
    (cd ${M80_REPOSITORY}; make)
    . ${M80_REPOSITORY}/bdfs/${M80_BDF}.sh
    test -n "${ENV}" && {
	. ${M80_REPOSITORY}/environments/${ENV}.sh
    }
    test -n "${PROJECT}" && { 
	. ${M80_REPOSITORY}/projects/${PROJECT}.sh
    }
fi

for var in $REQUIRED_VARIABLES ; do 
        requireSet $var 
done 

targetName=${TARGET} 
x=0
testTargetName=${targetName}

pathCheckList=${targetName}
while [ -z "$stopLooping" ]; do
  virtualTarget=$(eval "echo \$"${testTargetName}"_VIRTUAL") 
  if [ -n "${virtualTarget}" ]; then 
      realTarget=${virtualTarget} 
      pathCheckList=${pathCheckList}" "${realTarget}
  else 
      realTarget=${testTargetName} 
  fi 
  if [ "${realTarget}" = "${testTargetName}" ]; then
    stopLooping=true
  else
    testTargetName=${realTarget}
  fi
  ((x=$x+1))
  if [ $x -gt 100 ]; then
    cleanup virtual targets nested to deep\; probably a logic error
  fi
done

findPath() {
  set ${pathCheckList}
  while [ $# -gt 0 ]; do
    MODULE_BUILD_PATH=$(eval "echo \$"${MODULE}"_"$1"_PATH")
    if [ -z "${MODULE_BUILD_PATH}" ]; then
      echo "Didn't find value for "${MODULE}"_"${targetName}"_PATH".
      shift
    else
      return
    fi
  done
}

if [ -n "${BUILD_INSTANCE_LIST}" ]; then 
  buildInstanceList=${BUILD_INSTANCE_LIST} 
else  
  buildInstanceList=${BUILD_INSTANCES} 
fi 

for buildInstance in ${buildInstanceList} ; do 
  echo $$" : "$(date)" : "${buildInstance}" : "${buildUser}" : "${MODULE} 
  export DATABASE_INSTANCE=${buildInstance} 
  if [ -n "${BUILD_USER_LIST}" ]; then 
    buildUserList=${BUILD_USER_LIST} 
  else  
    buildUserList=$(eval echo \$${buildInstance}_BUILD_USERS) 
  fi 
  for buildUser in ${buildUserList} ; do 
    echo $$" : "$(date)" : "${buildInstance}" : "${buildUser}" : "${MODULE} 
    export DATABASE_USER=$buildUser 
    echo making ${realTarget} for $buildUser 
    if [ -n "${MODULE_LIST}" ]; then 
      moduleList=${MODULE_LIST} 
    else 
      moduleList=$(eval "echo \$"${buildUser}"_"${targetName}"_MODULES") 
    fi 
    echo eligible modules for $buildUser are ${moduleList}. 
    if [ -z "${moduleList}" ]; then 
      continue 
    fi 
    for MODULE in ${moduleList} ; do 
      export MODULE
      echo $$" : "$(date)" : "${buildInstance}" : "${buildUser}" : "${MODULE} 
      if [ -z "${MODULE}" ]; then        
          break
      fi 
      echo making ${realTarget} for $buildUser module $MODULE 
      if [ ${targetName} = "REPLICATION" ]; then 
        export CONNECTSTRING=${REPLICATION_ADMIN}@$(eval "echo \$"${buildUser}"_TNS") 
      else 
        export CONNECTSTRING=$(eval "echo \$"${buildUser}"_CONNECTSTRING") 
      fi 
#     the module NAME is in hand.  Derive the path.
#
      findPath
      if [ -n "${MODULE_BUILD_PATH}" -a -d $MODULE_BUILD_PATH ]; then 
          if [ -n "${DEBUG}" ]; then
	    echo "(cd $MODULE_BUILD_PATH ; make ${realTarget} )"
	  else
	    (cd $MODULE_BUILD_PATH ; make ${realTarget} )
          fi
      else 
         echo ERROR: ${MODULE} was skipped because no directory name \"${MODULE_BUILD_PATH}\" was found. 
         exit 
      fi 
      if [ $? -ne 0 ]; then 
           echo ${realTarget} failed for $buildUser"."$MODULE \(${MODULE_BUILD_PATH}\)
          exit 1 
      fi 
    done 
  done 
done

#
# Local Variables:
# mode: shell-script
# End:
# 

