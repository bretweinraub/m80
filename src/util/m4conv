#! /bin/bash
#
# M80 ---- see the License file for restrictions
#



PROGNAME=${0##*/}
TMPFILE=/tmp/${PROGNAME}.$$

if [ -n "${DEBUG}" ]; then	
	set -x
fi

PSCMD="ps axc"  









#
# $Header: /cvsroot/m80/m80/lib/shell/printmsg.sh,v 1.1.1.1 2003/11/26 22:24:33 bretweinraub Exp $
#
# Function:	printmsg
#
# Description:	generic error reporting routine.
#               BEWARE, white space is stripped and replaced with single spaces
#
# Call Signature:
#
# Side Effects:
#
# Assumptions:
#

printmsg () {
    if [ -z "${QUIET}" ]; then 
	if [ $# -ge 1 ]; then
	    /bin/echo -n ${M80_OVERRIDE_DOLLAR0:-$PROGNAME}:\($$\) >&2
		while [ $# -gt 0 ]; do /bin/echo -n " "$1 >&2 ; shift ; done
		if [ -z "${M80_SUPRESS_PERIOD}" ]; then
		    echo . >&2
		else
		    echo >&2
		fi
	fi
    fi
}


#
# Function:	cleanup
#
# Description:	generic KSH funtion for the end of a script
#
# History:	02.22.2000	bdw	passed error code through to localclean
#
# $Id: cleanup.sh,v 1.2 2004/04/06 22:42:02 bretweinraub Exp $
#

cleanup () {
    export EXITCODE=$1
    shift
    if [ $# -gt 0 ]; then
	printmsg $*
    fi
    if [ -n "${DQITMPFILE}" ]; then
	rm -f ${DQITMPFILE}
    fi
    if [ -n "${LOCALCLEAN}" ]; then
	localclean ${EXITCODE} # this function must be set
    fi
    if [ ${EXITCODE} -ne 0 ]; then
	# this is an error condition
	printmsg exiting with error code ${EXITCODE}
    else
	printmsg done
    fi
    exit ${EXITCODE}
}

trap "cleanup 1 caught signal" INT QUIT TERM HUP 2>&1 > /dev/null


require () {
    while [ $# -gt 0 ]; do
	#printmsg validating \$${1}
	derived=$(eval "echo \$"$1)
	if [ -z "$derived" ];then
	    printmsg \$${1} not defined
	    usage
	fi
	shift
    done
}





LOCALCLEAN=true
localclean () {
    rm -f /tmp/${PROGNAME}.$$*
    
}



usage () {
  printmsg  I am unhappy ...... a usage message follows for your benefit
  printmsg  Usage is -i {input_file} -o {output_file} -d {debug_flags} 

printmsg command can be run with no arguments if one choses


  cleanup 1
} 

OPTIND=0
while getopts :i:o:d: c 
    do case $c in        
	i) export input_file=$OPTARG;;
	o) export output_file=$OPTARG;;
	d) export debug_flags=$OPTARG;;
	:) printmsg $OPTARG requires a value
	   usage;;
	\?) printmsg unknown option $OPTARG
	   usage;;
    esac
done














function debugprint {
    test -n "$debug_flags" && printmsg "$*"
}

test -z "$input_file" && input_file=$1
test -z "$output_file" && output_file=$2
debugprint "input file: $input_file"
debugprint "output file: $output_file"

test -z "$input_file" && printmsg "specify input file" && exit 1
test -z "$output_file" && printmsg "specify output file" && exit 1

# 
# this m4 command is grabbed from the environment that
# created the script. It is derived from the generic.mk
# in the autofiles directory!
#

m4="/usr/bin/m4 -I/usr/local/m80-0.07/share/m80/lib -DSHELL=/bin/bash -DM80_BIN=/usr/local/m80-0.07/bin -DM80_LIB=/usr/local/m80-0.07/share/m80/lib -DPRINTDASHN=/bin/echo -DSPERL='/usr/bin/perl -I/usr/local/m80-0.07/share/m80/lib/perl' --prefix-builtins"




debugprint "About to grep $input_file for M80_COMPILERS"
export COMPILERS="$(grep M80_COMPILERS $input_file | directiveParser.pl --directive M80_COMPILERS ) $COMPILERS" 
debugprint "About to grep $input_file for M80_VARIABLE"
export REQUIRED_VALUES="$(grep M80_VARIABLE $input_file | directiveParser.pl --directive M80_VARIABLE ) $REQUIRED_VALUES"
debugprint "About to grep $input_file for VARIABLE"
export REQUIRED_VALUES="$(grep VARIABLE $input_file | directiveParser.pl --directive VARIABLE ) $REQUIRED_VALUES" 

test -z "${QUIET}" && test -n "$REQUIRED_VALUES" && echo REQUIRED_VALUES are ${REQUIRED_VALUES}
eval `varWarrior $REQUIRED_VALUES`

test -z "${QUIET}" && echo $m4 $COMPILERS $MACRO_DEFS  \< $input_file \>  $output_file 2\> $output_file.err

eval $m4 $COMPILERS $MACRO_DEFS  < $input_file > $output_file 2> $output_file.err 

test $? -ne 0 && { echo $m4 $COMPILERS ERRORS bailing out; cat $output_file.err; exit 1; } ;
chmod -f -w+x $output_file
if test ! -s $output_file.err; then
    rm -f $output_file.err
else 
    cat $output_file.err 
fi



# =pod

# =head1 NAME

# m4conv - m4 transform a file using directives

# =head1 VERSION

# This document describes 0.07.33 of m4conv

# =head1 SYNOPSIS

# C<< m4conv -d <debug flags> -i <input file> -o <output file> >>

# OR

# C<< m4conv <input file> <output file> >>

# =head1 DESCRIPTION

# Run a file through an m4 conversion like the old make rules do.

# This strips the make interface off of the conversion.

# =cut

#
# Local Variables:
# mode: shell-script
# End:
# 

